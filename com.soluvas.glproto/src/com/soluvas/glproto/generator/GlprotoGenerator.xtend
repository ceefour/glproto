/*
 * generated by Xtext
 */
package com.soluvas.glproto.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import java.util.logging.Logger
import org.eclipse.xtext.generator.GeneratorUtil
import com.soluvas.glproto.glproto.Model
import com.soluvas.glproto.glproto.File
import net.danieldietrich.xtext.generator.protectedregionsupport.runtime.ProtectedRegionUtil

class GlprotoGenerator implements IGenerator {
	
	ExtendedFileSystemAccess efsa
	Model model
	
	/**
	 * Requires ExtendedFileSystemAccess
	 */
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		GeneratorUtils::check(fsa)
		efsa = fsa as ExtendedFileSystemAccess
		model = resource.contents.get(0) as Model
		for (pkg : model.packages) {
			generatePackage(pkg)
		}
	}
	
	def void generatePackage(com.soluvas.glproto.glproto.Package pkg) {
		for (file : pkg.files) {
			generateFile(pkg, file)
		}
	}
	
	def void generateFile(com.soluvas.glproto.glproto.Package pkg, File file) {
		var pkgPath = pkg.name.replace(".", "/")
		var fileName = pkgPath + "/" + file.name + ".java"
		var generated = '''
		import something;
		
		public class DoSomething {
			
			public void makeJavaCoffee() {
				/*PROTECTED REGION ID(makeCoffee) START*/
				// TODO: please implement your business logic here!
				/*PROTECTED REGION END*/
			}
			
		}
		'''
		var String merged = generated.toString
		try {
			var _protected = efsa.getFileContents(fileName)
			var protectedDoc = ProtectedRegionUtil::parse(_protected as CharSequence)
			var generatedDoc = ProtectedRegionUtil::parse(generated as CharSequence)
			var mergedDoc = ProtectedRegionUtil::merge(generatedDoc, protectedDoc)
			merged = mergedDoc.contents
		} catch (Exception ex) {
			// no need to merge
		}
		efsa.generateFile(fileName, merged) 
	}
}
